<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>TakeSourceScreenshot = 0
TakeTargetScreenshot = 1
PerformTransition = 2
State = TakeSourceScreenshot
TargetRoom = -1

//transition kind to perform
kind = 0

if (instance_number(id) &lt;= 1)
{
    //Screenshot1 = surface_create(surface_get_width(application_surface),surface_get_height(application_surface));
    //Screenshot2 = surface_create(surface_get_width(application_surface),surface_get_height(application_surface));
    //Screenshot3 = surface_create(surface_get_width(application_surface),surface_get_height(application_surface));
    Screenshot1 = surface_create(room_width,room_height);
    Screenshot2 = surface_create(room_width,room_height);
    Screenshot3 = surface_create(room_width,room_height);
}
else
    instance_destroy()
TransitionCounter = 0
next = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(Screenshot1)
surface_free(Screenshot2)
surface_free(Screenshot3)

instance_create(x,y,objPlayer);
/*
with(objPlayer){
    frozen = 0;
    vspeed = 0;
    hspeed = 0;
    gravity = 0.4 * global.grav;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch State
{
    case TakeSourceScreenshot:
        surface_set_target(Screenshot1)
        draw_clear(c_black)
        draw_set_blend_mode_ext(7, 7)
        draw_surface(application_surface, 0, 0)
        draw_set_blend_mode(0)
        surface_reset_target()
        
        with(all){
                {
                    if(object_index != objWorld &amp;&amp; object_index != objTransitionHandler)instance_destroy();
                }
            }
        
        if(next != 0){
            TargetRoom = room_next(room);
            room_goto(TargetRoom);
        }
        else{
            room_goto(TargetRoom);
        }
        
        
        
        State = TakeTargetScreenshot
        break
    case TakeTargetScreenshot:
        with objPlayer {
            frozen = true;
            other.x = x;
            other.y = y;
            instance_destroy();
        }
        var cw,ch,aw,ah;
        cw = surface_get_width(Screenshot2);
        ch = surface_get_height(Screenshot2);
        aw = room_width;
        ah = room_height;
        if(cw != aw or aw != ah){
            surface_resize(Screenshot2,aw,ah);
        }
        
        
        surface_set_target(Screenshot2)
        draw_clear(c_black)
        //draw_set_blend_mode_ext(7, 7)
        //draw_set_blend_mode_ext(bm_one, bm_zero)
        //draw_surface(application_surface, 0, 0)
        var b,w,h;
        b = background_index[0];
        w = background_get_width(b);
        h = background_get_height(b);
        draw_background_ext(b,0,0,aw/w,ah/h,0,c_white,1);
            with(all){
                if (scrInDrawList(object_index)){
                    //this assumes they do not have other code in draw event
                    //draw_self();
                    if sprite_exists(sprite_index)draw_self();
                }
            }
        //draw_set_blend_mode(0)
        surface_reset_target()        
        
        //instance_deactivate_all(true)
        if surface_exists(Screenshot1)
            draw_surface(Screenshot1, 0, 0)
        State = PerformTransition
        break
    case PerformTransition:
        scrPerformTransition(kind);
        break;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
